unit Model.Impl.Entidade.Pessoa;

interface

uses
  System.SysUtils,

  Model.DAO.Entidade.Interfaces,
  Model.Entidade.Pessoa.Interfaces;

type
  TEntidadePessoa = class(TInterfacedObject, iEntidadePessoa)
    private
      [weak]
      FParent       : iDAOEntidade<iEntidadePessoa>;
      FTipoFiltro   : Integer;
      FId           : Integer;
      FTipoPessoa   : String;
      FPrimeiroNome : String;
      FSegundoNome  : String;
      FResultadoGet : Boolean;
    public
      constructor Create(Parent: iDAOEntidade<iEntidadePessoa>);
      destructor Destroy; override;
      class function New(Parent: iDAOEntidade<iEntidadePessoa>) : iEntidadePessoa;

      function TipoFiltro(Value : Integer) : iEntidadePessoa; overload;
      function TipoFiltro                  : Integer; overload;
      function ID(Value: Integer)          : iEntidadePessoa; overload;
      function ID                          : Integer; overload;
      function TipoPessoa(Value : String)  : iEntidadePessoa; overload;
      function TipoPessoa                  : String;  overload;
      function PrimeiroNome(Value: String) : iEntidadePessoa; overload;
      function PrimeiroNome                : String;  overload;
      function SegundoNome(Value: String)  : iEntidadePessoa; overload;
      function SegundoNome                 : String;  overload;

      function ResultadoGet(Value : Boolean) : iEntidadePessoa; overload;
      function ResultadoGet       : Boolean;                   overload;
      function &End                        :iDAOEntidade<iEntidadePessoa>;
  end;

implementation

{ TClassePadrao }

constructor TEntidadePessoa.Create(Parent: iDAOEntidade<iEntidadePessoa>);
begin
  FParent := Parent;
end;

destructor TEntidadePessoa.Destroy;
begin
  //
  inherited;
end;

class function TEntidadePessoa.New(Parent: iDAOEntidade<iEntidadePessoa>): iEntidadePessoa;
begin
  Result := Self.Create(Parent);
end;

function TEntidadePessoa.TipoFiltro(Value: Integer): iEntidadePessoa;
begin
  Result := Self;
  FTipoFiltro := Value;
end;

function TEntidadePessoa.TipoFiltro: Integer;
begin
  Result := FTipoFiltro;
end;

function TEntidadePessoa.ID(Value: Integer): iEntidadePessoa;
begin
  Result := Self;
  FID := Value;
end;

function TEntidadePessoa.ID: Integer;
begin
  Result := FID;
end;

function TEntidadePessoa.TipoPessoa(Value: String): iEntidadePessoa;
begin
  Result := Self;
  FTipoPessoa := Value;
end;

function TEntidadePessoa.TipoPessoa: String;
begin
  Result := FTipoPessoa;
end;

function TEntidadePessoa.PrimeiroNome(Value: String): iEntidadePessoa;
begin
  Result := Self;
  FPrimeiroNome := Value;
end;

function TEntidadePessoa.PrimeiroNome: String;
begin
  Result := FPrimeiroNome;
end;

function TEntidadePessoa.ResultadoGet(Value: Boolean): iEntidadePessoa;
begin
  Result := Self;
  FResultadoGet := Value;
end;

function TEntidadePessoa.ResultadoGet: Boolean;
begin
  Result := FResultadoGet;
end;

function TEntidadePessoa.SegundoNome(Value: String): iEntidadePessoa;
begin
  Result := Self;
  FSegundoNome := Value;
end;

function TEntidadePessoa.SegundoNome: String;
begin
  Result := FSegundoNome;
end;

function TEntidadePessoa.&End: iDAOEntidade<iEntidadePessoa>;
begin
  Result := FParent;
end;

end.
