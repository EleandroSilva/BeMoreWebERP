unit Model.Impl.Conexao.Firedac;

interface

uses
  System.SysUtils,
  System.Classes,
  System.Types,

  FireDAC.Stan.Intf,
  FireDAC.Stan.Option,
  FireDAC.Stan.Error,
  FireDAC.UI.Intf,
  FireDAC.Phys.Intf,
  FireDAC.Stan.Def,
  FireDAC.Stan.Pool,
  FireDAC.Stan.Async,
  FireDAC.Phys,
  FireDAC.Phys.MySQL,
  FireDAC.Phys.MySQLDef,
  FireDAC.VCLUI.Wait,
  FireDAC.Comp.Client,
  FireDAC.Stan.Param,
  FireDAC.DatS,
  FireDAC.DApt.Intf,
  FireDAC.DApt,
  FireDAC.Comp.DataSet,

  Data.DB,

  Model.Conexao.Interfaces,
  Model.Conexao.Configuracao.Interfaces;

type
  TConexaoFiredac = class(TInterfacedObject, iConexao)
    private
      FConexao             : TFDConnection;
      FDriverMySQL         : TFDPhysMySQLDriverLink;
      FConfiguracaoConexao : iConfiguracaoConexao;
    public
      constructor Create(ConfiguracaoConexao : iConfiguracaoConexao);
      destructor Destroy; override;
      class function New(ConfiguracaoConexao : iConfiguracaoConexao): iConexao;

      function Connection : TCustomConnection;
  end;

implementation

{ TClassePadrao }

constructor TConexaoFiredac.Create(ConfiguracaoConexao : iConfiguracaoConexao);
begin
  FConexao := TFDConnection.Create(nil);
  FConfiguracaoConexao := ConfiguracaoConexao;
end;

destructor TConexaoFiredac.Destroy;
begin
  FreeAndNil(FConexao);
  inherited;
end;

class function TConexaoFiredac.New(ConfiguracaoConexao : iConfiguracaoConexao): iConexao;
begin
  Result := Self.Create(ConfiguracaoConexao);
end;

function TConexaoFiredac.Connection: TCustomConnection;
begin
  try

  Except
    raise Exception.Create('Não foi possível realizar a conexão!');
  end;
end;

end.
